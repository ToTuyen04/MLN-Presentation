import React, { useState, useRef, useEffect } from 'react';

interface Message {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
}

interface ChatboxProps {
  isOpen: boolean;
  onToggle: () => void;
}

const Chatbox: React.FC<ChatboxProps> = ({ isOpen, onToggle }) => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI ƒë∆∞·ª£c train v·ªÅ "L√Ω lu·∫≠n nh·∫≠n th·ª©c trong ch·ªß nghƒ©a duy v·∫≠t bi·ªán ch·ª©ng". B·∫°n c√≥ c√¢u h·ªèi g√¨ v·ªÅ ch·ªß ƒë·ªÅ n√†y kh√¥ng?',
      isUser: false,
      timestamp: new Date()
    }
  ]);
  const [inputText, setInputText] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // Test API connectivity
  const testAPI = async () => {
    try {
      // Test v·ªõi endpoint ƒë∆°n gi·∫£n h∆°n
      const apiKey = import.meta.env.VITE_GEMINI_API_KEY;
      
      if (!apiKey) {
        console.error('API key not found in environment variables');
        return;
      }
      
      const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`;
      
      const testRequest = {
        contents: [{
          parts: [{
            text: "Hello"
          }]
        }]
      };

      console.log('Testing API with simple request...');
      const testResponse = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(testRequest)
      });
      
      console.log('Test Response Status:', testResponse.status);
      console.log('Test Response Headers:', Object.fromEntries(testResponse.headers.entries()));
      
      if (testResponse.ok) {
        const data = await testResponse.json();
        console.log('Test successful! Response:', data);
      } else {
        const errorText = await testResponse.text();
        console.error('Test failed! Error:', errorText);
      }
    } catch (error) {
      console.error('API Test Error:', error);
    }
  };

  useEffect(() => {
    testAPI(); // Test API when component mounts
  }, []);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const presentationContext = `
  B·∫°n l√† m·ªôt tr·ª£ l√Ω AI chuy√™n v·ªÅ "L√Ω lu·∫≠n nh·∫≠n th·ª©c trong ch·ªß nghƒ©a duy v·∫≠t bi·ªán ch·ª©ng". 
  H√£y tr·∫£ l·ªùi c√¢u h·ªèi d·ª±a tr√™n ki·∫øn th·ª©c ƒë√£ ƒë∆∞·ª£c train v·ªÅ ch·ªß ƒë·ªÅ n√†y.
  Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, r√µ r√†ng v√† d·ªÖ hi·ªÉu.
  `;

  const callGoogleAI = async (userMessage: string): Promise<string> => {
    try {
      console.log('ƒêang g·ªçi Google AI v·ªõi c√¢u h·ªèi:', userMessage);
      
      const apiKey = import.meta.env.VITE_GEMINI_API_KEY;
      const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`;
      
      const requestBody = {
        contents: [{
          parts: [{
            text: `${presentationContext}\n\nC√¢u h·ªèi: ${userMessage}`
          }]
        }],
        generationConfig: {
          temperature: 0.9,
          topK: 1,
          topP: 1,
          maxOutputTokens: 2048,
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_HATE_SPEECH",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          }
        ]
      };

      console.log('Request URL:', url);
      console.log('Request Body:', JSON.stringify(requestBody, null, 2));

      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: JSON.stringify(requestBody)
      });

      console.log('Response status:', response.status);
      console.log('Response headers:', response.headers);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('API Error Response:', errorText);
        throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
      }

      const data = await response.json();
      console.log('API Response:', data);
      
      if (data.candidates && data.candidates[0] && data.candidates[0].content && data.candidates[0].content.parts && data.candidates[0].content.parts[0]) {
        return data.candidates[0].content.parts[0].text;
      } else {
        console.error('C·∫•u tr√∫c response kh√¥ng ƒë√∫ng:', data);
        throw new Error('C·∫•u tr√∫c ph·∫£n h·ªìi t·ª´ AI kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng');
      }
    } catch (error) {
      console.error('L·ªói khi g·ªçi Google AI:', error);
      
      // Ch·ªâ tr·∫£ v·ªÅ th√¥ng b√°o l·ªói ƒë∆°n gi·∫£n
      if (error instanceof Error) {
        if (error.message.includes('HTTP error! status: 400')) {
          return 'C√≥ l·ªói v·ªõi y√™u c·∫ßu API. Vui l√≤ng ki·ªÉm tra l·∫°i c√¢u h·ªèi v√† th·ª≠ l·∫°i.';
        } else if (error.message.includes('HTTP error! status: 403')) {
          return 'API key kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt quota. Vui l√≤ng li√™n h·ªá admin.';
        } else if (error.message.includes('HTTP error! status: 429')) {
          return 'Qu√° nhi·ªÅu y√™u c·∫ßu. Vui l√≤ng ƒë·ª£i m·ªôt ch√∫t r·ªìi th·ª≠ l·∫°i.';
        }
      }
      
      return 'Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi AI. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet v√† th·ª≠ l·∫°i.';
    }
  };

  const handleSendMessage = async () => {
    if (!inputText.trim() || isLoading) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputText.trim(),
      isUser: true,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputText('');
    setIsLoading(true);

    try {
      const aiResponse = await callGoogleAI(userMessage.text);
      
      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: aiResponse,
        isUser: false,
        timestamp: new Date()
      };

      setMessages(prev => [...prev, aiMessage]);
    } catch (error) {
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: 'Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.',
        isUser: false,
        timestamp: new Date()
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString('vi-VN', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  return (
    <>
      {/* Chatbox Toggle Button */}
      <button
        className={`chatbox-toggle ${isOpen ? 'active' : ''}`}
        onClick={onToggle}
        aria-label="Toggle chatbox"
      >
        {isOpen ? '‚úï' : 'üí¨'}
      </button>

      {/* Chatbox Container */}
      <div className={`chatbox-container ${isOpen ? 'open' : ''}`}>
        <div className="chatbox-header">
          <div className="chatbox-title">
            <div className="chatbox-avatar">ü§ñ</div>
            <div>
              <h3>Tr·ª£ l√Ω AI - L√Ω lu·∫≠n nh·∫≠n th·ª©c</h3>
              <p>ƒêang ho·∫°t ƒë·ªông</p>
            </div>
          </div>
          <button className="chatbox-close" onClick={onToggle}>
            ‚úï
          </button>
        </div>

        <div className="chatbox-messages">
          {messages.map((message) => (
            <div
              key={message.id}
              className={`message ${message.isUser ? 'user' : 'ai'}`}
            >
              <div className="message-content">
                <p>{message.text}</p>
                <span className="message-time">
                  {formatTime(message.timestamp)}
                </span>
              </div>
            </div>
          ))}
          
          {isLoading && (
            <div className="message ai">
              <div className="message-content">
                <div className="typing-indicator">
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
              </div>
            </div>
          )}
          
          <div ref={messagesEndRef} />
        </div>

        <div className="chatbox-input">
          <div className="input-container">
            <textarea
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="H·ªèi v·ªÅ l√Ω lu·∫≠n nh·∫≠n th·ª©c..."
              disabled={isLoading}
              rows={1}
            />
            <button
              onClick={handleSendMessage}
              disabled={!inputText.trim() || isLoading}
              className="send-button"
            >
              {isLoading ? '‚è≥' : '‚û§'}
            </button>
          </div>
          
          {/* Debug button */}
          <button
            onClick={testAPI}
            style={{
              marginTop: '8px',
              padding: '4px 8px',
              fontSize: '12px',
              background: '#f0f0f0',
              border: '1px solid #ccc',
              borderRadius: '4px',
              cursor: 'pointer'
            }}
          >
            Test API (Check Console)
          </button>
        </div>
      </div>
    </>
  );
};

export default Chatbox;